// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/olteffe/avitochat/internal/repository (interfaces: Chat)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/olteffe/avitochat/internal/models"
)

// MockChat is a mock of Chat interface.
type MockChat struct {
	ctrl     *gomock.Controller
	recorder *MockChatMockRecorder
}

// MockChatMockRecorder is the mock recorder for MockChat.
type MockChatMockRecorder struct {
	mock *MockChat
}

// NewMockChat creates a new mock instance.
func NewMockChat(ctrl *gomock.Controller) *MockChat {
	mock := &MockChat{ctrl: ctrl}
	mock.recorder = &MockChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChat) EXPECT() *MockChatMockRecorder {
	return m.recorder
}

// CreateChatRepository mocks base method.
func (m *MockChat) CreateChatRepository(arg0 *models.Chats) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatRepository", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatRepository indicates an expected call of CreateChatRepository.
func (mr *MockChatMockRecorder) CreateChatRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatRepository", reflect.TypeOf((*MockChat)(nil).CreateChatRepository), arg0)
}

// ExistenceChatName mocks base method.
func (m *MockChat) ExistenceChatName(arg0 *models.Chats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistenceChatName", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExistenceChatName indicates an expected call of ExistenceChatName.
func (mr *MockChatMockRecorder) ExistenceChatName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistenceChatName", reflect.TypeOf((*MockChat)(nil).ExistenceChatName), arg0)
}

// ExistenceUser mocks base method.
func (m *MockChat) ExistenceUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistenceUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExistenceUser indicates an expected call of ExistenceUser.
func (mr *MockChatMockRecorder) ExistenceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistenceUser", reflect.TypeOf((*MockChat)(nil).ExistenceUser), arg0)
}

// GetChatRepository mocks base method.
func (m *MockChat) GetChatRepository(arg0 string) ([]*models.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatRepository", arg0)
	ret0, _ := ret[0].([]*models.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatRepository indicates an expected call of GetChatRepository.
func (mr *MockChatMockRecorder) GetChatRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatRepository", reflect.TypeOf((*MockChat)(nil).GetChatRepository), arg0)
}
