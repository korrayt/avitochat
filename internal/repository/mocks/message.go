// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/olteffe/avitochat/internal/repository (interfaces: Message)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/olteffe/avitochat/internal/models"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// ExistenceAuthor mocks base method.
func (m *MockMessage) ExistenceAuthor(arg0 *models.Messages) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistenceAuthor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExistenceAuthor indicates an expected call of ExistenceAuthor.
func (mr *MockMessageMockRecorder) ExistenceAuthor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistenceAuthor", reflect.TypeOf((*MockMessage)(nil).ExistenceAuthor), arg0)
}

// ExistenceChat mocks base method.
func (m *MockMessage) ExistenceChat(arg0 *models.Messages) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistenceChat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExistenceChat indicates an expected call of ExistenceChat.
func (mr *MockMessageMockRecorder) ExistenceChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistenceChat", reflect.TypeOf((*MockMessage)(nil).ExistenceChat), arg0)
}

// GetMessagesRepository mocks base method.
func (m *MockMessage) GetMessagesRepository(arg0 *models.Messages) ([]*models.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesRepository", arg0)
	ret0, _ := ret[0].([]*models.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesRepository indicates an expected call of GetMessagesRepository.
func (mr *MockMessageMockRecorder) GetMessagesRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesRepository", reflect.TypeOf((*MockMessage)(nil).GetMessagesRepository), arg0)
}

// SendMessageRepository mocks base method.
func (m *MockMessage) SendMessageRepository(arg0 *models.Messages) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageRepository", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageRepository indicates an expected call of SendMessageRepository.
func (mr *MockMessageMockRecorder) SendMessageRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageRepository", reflect.TypeOf((*MockMessage)(nil).SendMessageRepository), arg0)
}
