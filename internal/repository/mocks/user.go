// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/olteffe/avitochat/internal/repository (interfaces: User)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/olteffe/avitochat/internal/models"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUserRepository mocks base method.
func (m *MockUser) CreateUserRepository(arg0 *models.Users) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRepository", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRepository indicates an expected call of CreateUserRepository.
func (mr *MockUserMockRecorder) CreateUserRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRepository", reflect.TypeOf((*MockUser)(nil).CreateUserRepository), arg0)
}

// ExistenceUser mocks base method.
func (m *MockUser) ExistenceUser(arg0 *models.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistenceUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExistenceUser indicates an expected call of ExistenceUser.
func (mr *MockUserMockRecorder) ExistenceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistenceUser", reflect.TypeOf((*MockUser)(nil).ExistenceUser), arg0)
}
